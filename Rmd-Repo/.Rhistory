ggplot(df_run, aes(x=t,y=gamble.2..4.)) + geom_line()
replicate(gamble(2,4),100)
replicate(gamble(2,4),n=100)
t <- replicate(gamble(2,4),n=100)
t_f <- data.frame(t)
t <- replicate(gamble(2,4),n=100)
lapply(t, length)
t_len <- lapply(t, length)
t[t_len]
t_len <- lapply(t, length)
t_len
t_len_vec <- vector(t_len)
t_len_vec <- unlist(t_len)
t_len_vec
a<- c(3,4)
index(a,4)
a <-c(3,4)
t <- replicate(gamble(2,4),n=10)
t_len <- lapply(t, length)
t
t[rep(1)]
t[unlist(t_lin)]
t[unlist(t_len)]
t_len <- lapply(t, length)
t[unlist(t_len)]
t <- replicate(gamble(2,4),n=10)
unlist(t)
t <- replicate(gamble(2,4),n=10)
t_len <- lapply(t, length)
t <- replicate(gamble(2,4),n=10)
t
for (i in t) {
}
for (i in t) {
t[[1]]
}
for (i in length(t)) {
t[[1]]
}
print(t[[1]])
for (i in length(t)) {
print(t[[1]])
}
for (i in length(t)) {
print(t[[i]])
}
for (i in length(t)) {
print(t[[i]])
}
for (i in 1:length(t)) {
print(t[[i]])
}
for (i in 1:length(t)) {
print(tail(t[[i]]),1)
}
for (i in 1:length(t)) {
print(tail(t[[i]],1))
}
t <- replicate(gamble(2,4),n=10)
t_len <- lapply(t, length)
for (i in 1:length(t)) {
print(tail(t[[i]],1) >= 4)
}
t_len <- lapply(t, length)
t_len
for (i in 1:length(t)) {
print(length(t[[i]]))
}
t
for (i in 1:length(t)) {
print(length(t[[i]]))
}
d <- for (i in 1:length(t)) {
print(length(t[[i]]))
}
for (i in 1:length(t)) {
return(length(t[[i]]))
}
g <- for (i in 1:length(t)) {
return(length(t[[i]]))
}
g
g <- c()
h <- c()
for (i in 1:length(t)) {
g[i] <- (length(t[[i]]))
}
g
for (i in 1:length(t)) {
g <- c(g(length(t[[i]])))
}
g <- c()
for (i in 1:length(t)) {
g <- c(g(length(t[[i]])))
}
for (i in 1:length(t)) {
g <- c(g,(length(t[[i]])))
}
g
sum(g)
for (i in 1:length(t)) {
h <- c(h,(tail(t[[i]],1) >= 4))
}
h
## install.packages("GillespieSSA2")  ## uncomment and run if necessary
library(GillespieSSA2)
## install.packages("GillespieSSA2")  ## uncomment and run if necessary
library(GillespieSSA2)
## need to assemble model parameters into *named* vector:
params = c(b=2, d=1)
## how long (in simulation time, not real time) will simulations run?
finalTime = 2
## what should initial value of state variables (here just n) be?
## use *named* vector:
state0 = c(n=1)
## for Gillespie simulations: time is continuous, but events are
## discrete occurrence of one of a finite list of possible reactions:
reactions = list(
## reaction constructor function from GillespieSSA2 needs 2 args:
## - propensity: a character string representation of the
##   function of params (b or d) and state variables (n)
##   which multiplies dt to yield probability reaction
##   happens in infinitesimal time interval of length dt, and
## - effect: a *named* vector indicating how an occurrence
##   of the reaction changes the values of the state variable(s)
reaction("b * n", c(n = +1)),
reaction("d * n", c(n = -1))
)
## set random number generator seed to obtain reproducible trajectory:
set.seed(123)
## use ssa function from GillespieSSA2 to simulate trajectory:
ssaObject = ssa(initial_state = state0,
reactions = reactions,
params = params,
final_time = finalTime)
## install.packages("GillespieSSA2")  ## uncomment and run if necessary
library(GillespieSSA2)
## need to assemble model parameters into *named* vector:
params = c(b=2, d=1)
## how long (in simulation time, not real time) will simulations run?
finalTime = 2
## what should initial value of state variables (here just n) be?
## use *named* vector:
state0 = c(n=1)
## for Gillespie simulations: time is continuous, but events are
## discrete occurrence of one of a finite list of possible reactions:
reactions = list(
## reaction constructor function from GillespieSSA2 needs 2 args:
## - propensity: a character string representation of the
##   function of params (b or d) and state variables (n)
##   which multiplies dt to yield probability reaction
##   happens in infinitesimal time interval of length dt, and
## - effect: a *named* vector indicating how an occurrence
##   of the reaction changes the values of the state variable(s)
reaction("b * n", c(n = +1)),
reaction("d * n", c(n = -1))
)
## set random number generator seed to obtain reproducible trajectory:
set.seed(123)
## use ssa function from GillespieSSA2 to simulate trajectory:
ssaObject = ssa(initial_state = state0,
reactions = reactions,
params = params,
final_time = finalTime)
## let's plot the trajectory with qplot using geom_step:
qplot(ssaObject$time, ssaObject$state[ , "n"], geom="step")
## install.packages("GillespieSSA2")  ## uncomment and run if necessary
library(GillespieSSA2)
## need to assemble model parameters into *named* vector:
params = c(b=2, d=1)
## how long (in simulation time, not real time) will simulations run?
finalTime = 2
## what should initial value of state variables (here just n) be?
## use *named* vector:
state0 = c(n=1)
## for Gillespie simulations: time is continuous, but events are
## discrete occurrence of one of a finite list of possible reactions:
reactions = list(
## reaction constructor function from GillespieSSA2 needs 2 args:
## - propensity: a character string representation of the
##   function of params (b or d) and state variables (n)
##   which multiplies dt to yield probability reaction
##   happens in infinitesimal time interval of length dt, and
## - effect: a *named* vector indicating how an occurrence
##   of the reaction changes the values of the state variable(s)
reaction("b * n", c(n = +1)),
reaction("d * n", c(n = -1))
)
## set random number generator seed to obtain reproducible trajectory:
set.seed(123)
## use ssa function from GillespieSSA2 to simulate trajectory:
ssaObject = ssa(initial_state = state0,
reactions = reactions,
params = params,
final_time = finalTime)
## let's plot the trajectory with qplot using geom_step:
qplot(ssaObject$time, ssaObject$state[ , "n"], geom="step")
## try a different random number generator seed to get a different
## trajectory from the same system:
set.seed(12345)
ssaObject = ssa(initial_state = state0,
reactions = reactions,
params = params,
final_time = finalTime)
qplot(ssaObject$time, ssaObject$state[ , "n"], geom="step")
stateAtTimeT = function(ssaObject, t) {
## find the time of the last event to occur before time t:
lastEventTimeBeforeT = max(which(ssaObject$time - t <= 0))
## report the state at that time
## (which will also be the state at t, since nothing happens
##  in the intervening time):
as.numeric(ssaObject$state[lastEventTimeBeforeT, ])
}
stateAtTimeT = function(ssaObject, t) {
## find the time of the last event to occur before time t:
lastEventTimeBeforeT = max(which(ssaObject$time - t <= 0))
## report the state at that time
## (which will also be the state at t, since nothing happens
##  in the intervening time):
as.numeric(ssaObject$state[lastEventTimeBeforeT, ])
}
stateAtTimeT(ssaObject, 0.04)
stateAtTimeT(ssaObject, 0.05)
library(tidyverse)
bg <- read_csv("https://drive.google.com/uc?export=download&id=1iDZjouO3o2KmO3EJg8tdqjKXyQ3XE7FA")
bg <- read_csv("https://drive.google.com/uc?export=download&id=1iDZjouO3o2KmO3EJg8tdqjKXyQ3XE7FA")
rec <- read_csv("https://drive.google.com/uc?export=download&id=1PhQ51JED5ZVR6Qp85Ds5GK2cg55IQzjr")
glimpse(bg)
glimpse(rec)
anti_join(bg,rec)
anti_join(bg,rec, by =c("ID" = "id"))
anti_join(bg,rec, by =c("ID" = "id")) %>% nrow()
anti_join(rec,bg, by =c("id" = "ID")) %>% nrow()
full_join(rec,bg, by = c("id" = "ID")) %>% nrow()
150000 - full_join(rec,bg, by = c("id" = "ID")) %>% nrow()
inner_join(rec,bg, by = c("id" = "ID")) %>% nrow()
log_females <- c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150) %>% log()
library(tidyverse)
log_females <- c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150) %>% log()
log_males <- c(0.185, 0.222, 0.149, 0.187, 0.191, 0.219, 0.132, 0.144, 0.140)
log_males <- c(0.185, 0.222, 0.149, 0.187, 0.191, 0.219, 0.132, 0.144, 0.140) %>% log()
t.test(log_females, log_males)
log_females
pivot_longer(log_females)
log_females <- as.data.frame(females = c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150))
log_females <- data.frame(females = c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150))
log_females
females <- data.frame(weight = c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150)) %>% mutate(log_wt = log(weight))
females
females <- data.frame(weight = c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150)) %>% mutate(log_wt = log(weight))
males <- data.frame(weight = c(0.185, 0.222, 0.149, 0.187, 0.191, 0.219, 0.132, 0.144, 0.140)) %>% mutate(log_wt = log(weight))
t.test(females$log_wt, males$log_wt)
females <- data.frame(weight = c(0.291, 0.208, 0.241, 0.437, 0.228, 0.256, 0.208, 0.234, 0.320, 0.340, 0.150)) %>% mutate(logweight = log(weight))
males <- data.frame(weight = c(0.185, 0.222, 0.149, 0.187, 0.191, 0.219, 0.132, 0.144, 0.140)) %>% mutate(logweight = log(weight))
t.test(females$logweight, males$logweight)
females %>% mutate(sex = "Female") -> females
females
females %>% mutate(sex = "Female") %>% select(sex, weight,logweight) -> females
females
males %>% mutate(sex = "Male") %>% select(sex, weight, logweight) -> males
rbind(males,females)
rbind(males, females) -> merged
set.seed(348)
t <- c()
t <- c()
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight)
t <- c()
for (i in 1:5000) {
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight)
t[i] <- mean(perm[perm$sex == "Male",]$weight)-
mean(perm[perm$sex == "Female",]$weight)
}
t
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight, logweight = merged$logweight)
perm
t_ln <- c()
t_ln <- c()
for (i in 1:5000) {
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight, logweight = merged$logweight)
t[i] <- mean(perm[perm$sex == "Male",]$weight)-
mean(perm[perm$sex == "Female",]$weight)
t_ln[i] <- mean(perm[perm$sex == "Male",]$weight)-
mean(perm[perm$sex == "Female",]$weight)
}
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight, logweight = merged$logweight)
for (i in 1:5000) {
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight, logweight = merged$logweight)
t[i] <- mean(perm[perm$sex == "Male",]$weight)-
mean(perm[perm$sex == "Female",]$weight)
t_ln[i] <- mean(perm[perm$sex == "Male",]$logweight)-
mean(perm[perm$sex == "Female",]$logweight)
}
mean(merged[merged$sex == "Male",]$weight)
mean(merged[merged$sex == "Male",]$weight)
obs_wgt_diff <- mean(merged[merged$sex == "Male",]$weight) - mean(merged[merged$sex == "Female",]$weight)
obs_wgt_diff <- mean(merged[merged$sex == "Male",]$weight) - mean(merged[merged$sex == "Female",]$weight)
obs_logwgt_diff <- mean(merged[merged$sex == "Male",]$logweight) - mean(merged[merged$sex == "Female",]$logweight)
obs_wgt_diff
obs_wgt_diff
mean(t > -obs_wgt_diff| t < obs_wgt_diff)
mean(t_ln > -obs_logwgt_diff | t_ln < obs_logwgt_diff)
hist(t)
hist(t); abline(v = c(obs_wgt_diff, - obs_wgt_diff), col = "red")
obs_wgt_diff
hist(t); abline(v = c(obs_wgt_diff, - obs_wgt_diff), col = "red")
obs_wgt_diff
obs_logwgt_diff
mean(t > -obs_wgt_diff | t < obs_wgt_diff)
mean(t_ln > -obs_logwgt_diff | t_ln < obs_logwgt_diff)
set.seed(348)
females %>% mutate(sex = "Female") %>% select(sex, weight, logweight) -> females
males %>% mutate(sex = "Male") %>% select(sex, weight, logweight) -> males
rbind(males, females) -> merged
t <- c()
t_ln <- c()
for (i in 1:5000) {
perm <- data.frame(sex = sample(merged$sex), weight = merged$weight, logweight = merged$logweight)
t[i] <- mean(perm[perm$sex == "Male",]$weight)-
mean(perm[perm$sex == "Female",]$weight)
t_ln[i] <- mean(perm[perm$sex == "Male",]$logweight)-
mean(perm[perm$sex == "Female",]$logweight)
}
obs_wgt_diff <- mean(merged[merged$sex == "Male",]$weight) - mean(merged[merged$sex == "Female",]$weight)
obs_logwgt_diff <- mean(merged[merged$sex == "Male",]$logweight) - mean(merged[merged$sex == "Female",]$logweight)
mean(t > -obs_wgt_diff | t < obs_wgt_diff)
mean(t_ln > -obs_logwgt_diff | t_ln < obs_logwgt_diff)
obs_wgt_diff
r <- c()
for (i in 1:5000) {
samp_m <- sample(merged[merged$sex == "Male",]$weight, replace = T)
samp_f <- sample(merged[merged$sex == "Female",]$weight, replace = T)
r[i] <- mean(samp_m) - mean(samp_f)
}
mean(r)
quantile(r, .025)
quantile(r, c(.025,.975))
PlantGrowth
?pf
PlantGrowth %>% aov()
PlantGrowth %>% aov()
PlantGrowth
PlantGrowth %>% group_by(group)
PlantGrowth %>% group_by(group) %>% summarise(weight, "mean")
PlantGrowth
?pf
PlantGrowth %>% group_by(group) %>% summarise(weight, "mean")
PlantGrowth %>% group_by(group) %>% summarise(weight, mean)
PlantGrowth %>% group_by(group) %>% summarise(mean = mean(weight))
PlantGrowth %>% group_by(group) %>% summarise(mean_diff = weight - mean(weight))
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = (weight - mean(weight))^2)
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = mean(weight - mean(weight))^2)
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = mean((weight - mean(weight))^2))
PlantGrowth %>% summarise(mean_diff_sq = mean((weight - mean(weight))^2))
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = mean((weight - mean(weight))^2)) -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = mean((weight - mean(weight))^2)) -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) -> ssw
PlantGrowth %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2))
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) %>% sum -> ssw
PlantGrowth %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) -> ssb
ssw
ssb
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) %>% sum -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) %>% sum -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) %>% sum() -> ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) -> ssw
ssw
PlantGrowth %>% group_by(group) %>% summarise(mean_diff_sq = sum((weight - mean(weight))^2)) %>% summarise(sum = sum(mean_diff_sq))-> ssw
ssw
ssw
PlantGrowth
PlantGrowth %>% group_by(group) %>% summarise(me = mean(weight)
PlantGrowth %>% group_by(group) %>% summarise(me = mean(weight))
PlantGrowth %>% group_by(group) %>% summarise(me = mean(weight))
PlantGrowth %>% nrow
F_sc = (ssb/(2))/(ssw/(30-3))
F_sc
F_sc
F_sc %>% pf(, df1 =, df2=, lower.tail = F)
F_sc %>% pf(, df1 =2, df2=30, lower.tail = F)
pf(F_sc, df1 =2, df2=30, lower.tail = F)
pf(F_sc, df1 =2, df2=30, lower.tail = F)
F_sc = (ssb/(2))/(ssw/(30-3))
F_sc
pf(F_sc$mean_diff_sq, df1 =2, df2=30, lower.tail = F)
PlantGrowth
?aov
summary(aov(weight ~ group, data = PlantGrowth))
F_sc = (ssb/(2))/(ssw/(30-3))
pf(F_sc$mean_diff_sq, df1 =2, df2=30, lower.tail = F)
F_sc
summary(aov(weight ~ group, data = PlantGrowth))
ssw
summary(aov(weight ~ group, data = PlantGrowth))
ssw
summary(aov(weight ~ group, data = PlantGrowth))
ssb
summary(aov(weight ~ group, data = PlantGrowth))
ssb
PlantGrowth %>% mutate(total_mean = mean(weight)) %>% group_by(group) %>% summarise(mean_diff_sq = sum((mean(weight) - total_mean)^2)) -> ssb
ssb
PlantGrowth %>% mutate(total_mean = mean(weight)) %>% group_by(group) %>% summarise(mean_diff_sq = sum((mean(weight) - total_mean)^2))%>% summarise(sum = sum(mean_diff_sq)) -> ssb
ssb
summary(aov(weight ~ group, data = PlantGrowth))
ssb
summary(aov(weight ~ group, data = PlantGrowth))
F_sc = (ssb/(2))/(ssw/(30-3))
pf(F_sc$mean_diff_sq, df1 =2, df2=30, lower.tail = F)
F_sc
pf(F_sc$sum, df1 =2, df2=30, lower.tail = F)
summary(aov(weight ~ group, data = PlantGrowth))
F_sc = (ssb/(2))/(ssw/(30-3))
F_sc
pf(F_sc$sum, df1 =30, df2=2, lower.tail = F)
summary(aov(weight ~ group, data = PlantGrowth))
F_sc = (ssb/(2))/(ssw/(30-3))
F_sc
pf(F_sc$sum, df1 =2, df2=30, lower.tail = F)
summary(aov(weight ~ group, data = PlantGrowth))
F_sc
summary(aov(weight ~ group, data = PlantGrowth))
pf(F_sc$sum, df1 =2, df2=30, lower.tail = F)
summary(aov(weight ~ group, data = PlantGrowth))
pots<-read_csv("http://www.nathanielwoodward.com/Pottery.csv")
pots
manova(cbind(Al)~ Site, data = pots)
pots
manova(cbind(Al,Fe)~ Site, data = pots)
pots
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots)
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots) %>% summary
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots)
install.packages("vegan")
library(vegan)
adonis(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots)
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots) %>% summary()
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots) -> man1
summary(man1)
summary.aov(man1)
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Na, pots$Site, p.adj="none")
dists <- pots %>% select(Al,Fe,Mg,Ca,Na) %>% dist()
adonis(dists~Site, data = pots)
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots) -> man1
summary(man1)
pots
pots %>% pivot_longer(Al:Na)
pots %>% pivot_longer(Al:Na, names_to = "Element", values_to = "Value")
pots %>% pivot_longer(Al:Na, names_to = "Element", values_to = "Value") -> pots_long
pots_long %>% ggplot(aes(x = Site, y = Value)) + geom_bar(stat = "summary")
pots_long %>% ggplot(aes(x = Site, y = Value)) + geom_bar(stat = "summary") + facet_wrap(~Element)
pots_long %>% ggplot(aes(x = Site, y = Value)) + geom_bar(stat = "summary") + facet_wrap(~Element, scales = "free")
mean(t > -obs_wgt_diff | t < obs_wgt_diff)
mean(t_ln > -obs_logwgt_diff | t_ln < obs_logwgt_diff)
F_sc
pf(F_sc$sum, df1 =2, df2=30, lower.tail = F)
pf(F_sc$sum, df1 =2, df2=30, lower.tail = F)
manova(cbind(Al,Fe,Mg,Ca,Na)~ Site, data = pots) -> man1
summary(man1)
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
summary.aov(man1)
summary(man1)
summary.aov(man1)
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
1-.95^11
.05/11
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Na, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none") > .0045
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none") -> f
f
f$p.value
pairwise.t.test(pots$Al, pots$Site, p.adj="none")$p.value
pairwise.t.test(pots$Al, pots$Site, p.adj="none")$p.value > 0.0045
pairwise.t.test(pots$Al, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Na, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Al, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")$p.value %>% between(.0045,.05)
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Al, pots$Site, p.adj="none")
pairwise.t.test(pots$Fe, pots$Site, p.adj="none")
pairwise.t.test(pots$Mg, pots$Site, p.adj="none")
pairwise.t.test(pots$Ca, pots$Site, p.adj="none")
pairwise.t.test(pots$Na, pots$Site, p.adj="none")
pots_long %>% ggplot(aes(x = Site, y = Value)) + geom_bar(stat = "summary") + geom_errorbar(stat="summary",fun.data=mean_cl_boot) +
facet_wrap(~Element, scales = "free")
pots_long %>% ggplot(aes(x = Site, y = Value)) + geom_bar(stat = "summary") + geom_errorbar(stat="summary",fun.data=mean_cl_boot) +
facet_wrap(~Element, scales = "free") + theme(axis.text.x = element_text(angle = 90))
setwd("~/GitHub/arun-krishnaraj.github.io/Rmd-Repo")
