A[5,6:10] = C[6:10]
A[6,8:10] = C[8:10]
A[7,9:10] = C[9:10]
A[8,10] = C[10]
A
A[1,1] = A[1,1] + 100
A[8,10] = A[8,10] +100
A[8,10] = C[10]
A[1,1] = A[1,1] + 100
A[2,2] = A[2,2] + 100
A[2,3] = A[2,3] + 100
A[3,4] = A[3,4] + 100
A[4,5] = A[4,5] + 100
A[5,6] = A[5,6] + 100
A[5,7] = A[5,7] + 100
A[6,8] = A[6,8] + 100
A[7,9] = A[7,9] + 100
A[8,10] = A[8,10] +100
A
C = c(5,3.5,5,3.5,4,9,6,8,9,7)
C = c(5,3.5,5,3.5,4,9,6,8,9,7)
A[1,] = C
A[2,2:10] = C[2:10]
A[3,4:10] = C[4:10]
A[4,5:10] = C[5:10]
A[5,6:10] = C[6:10]
A[6,8:10] = C[8:10]
A[7,9:10] = C[9:10]
A[8,10] = C[10]
A[1,1] = A[1,1] + 100
A[2,2] = A[2,2] + 100
A[2,3] = A[2,3] + 100
A[3,4] = A[3,4] + 100
A[4,5] = A[4,5] + 100
A[5,6] = A[5,6] + 100
A[5,7] = A[5,7] + 100
A[6,8] = A[6,8] + 100
A[7,9] = A[7,9] + 100
A[8,10] = A[8,10] +100
A
dir = rep("=",8)
c = rep(1,10)
c = rep(1,10)
s = lp("min",c,A,dir,L)
s$objective
s$objval
s$solution
c = rep(C)
s = lp("min",c,A,dir,L)
s$solution
c = rep(1,10)
s$solution *%*
s$solution *%* 1
dir = rep("=",8)
c = rep(1,10)
s = lp("min",c,A,dir,L)
s$solution
global = function(prices,coupons,maturity,liabilities)
{
if length(prices) = length(coupons)
{
print("yes")
}
}
A
global <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
}
global <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
print(Amat)
}
global(0,0,0,0)
global(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
A
direct = rep("=",length(liabilities))
global <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
direct = rep("=",length(liabilities))
cmat = rep(1,length(prices))
sol = lp("min",cmat,Amat,direct,liabilities)
print(sol$solution)
}
global(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
s$solution
global <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
direct = rep("=",length(liabilities))
cmat = rep(1,length(prices))
sol = lp("min",cmat,Amat,direct,liabilities)
print(sol$solution) + print("hi")
}
global(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
global <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
direct = rep("=",length(liabilities))
cmat = rep(1,length(prices))
sol = lp("min",cmat,Amat,direct,liabilities)
print(sol$solution)
}
global(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
dedicate_g2.R <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
direct = rep("=",length(liabilities))
cmat = rep(1,length(prices))
sol = lp("min",cmat,Amat,direct,liabilities)
print(sol$solution)
}
dedicate_g2.R(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
s$solution
A
Amat = matrix(0,length(liabilities),length(prices))
dedicate_g2.R <- function(prices,coupons,maturity,liabilities) {
Amat = matrix(0,length(liabilities),length(prices))
for(i in 1:length(prices)){
Amat[1:maturity[i],i] = coupons[i]
Amat[maturity[i],i] = Amat[maturity[i],i]+100
}
direct = rep("=",length(liabilities))
cmat = rep(1,length(prices))
sol = lp("min",cmat,Amat,direct,liabilities)
print(Amat)
print(sol$solution)
}
dedicate_g2.R(c(102,99,101,98,98,104,100,101,102,94),c(5,3.5,5,3.5,4,9,6,8,9,7),
c(1,2,2,3,4,5,5,6,7,8),c(12000,18000,20000,20000,16000,15000,12000,10000))
library(quantmod)
getSymbol("AAPL")
getSymbols("AAPL")
plot(AAPL$AAPL.Open)
plot(AAPL$AAPL.Adjusted)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 5)
plot(roll_apple)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 10)
plot(roll_apple)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 15)
plot(roll_apple)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 25)
plot(roll_apple)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 40)
plot(roll_apple)
roll_apple = rollapply(AAPL$AAPL.Adjusted, FUN = mean, 50)
plot(roll_apple)
lines(AAPL$AAPL.Adjusted, col = "red")
library(forecast)
auto.arima(roll_apple) %>% forecast() %>% plot()
auto.arima(roll_apple) %>% forecast(, 500) %>% plot()
auto.arima(roll_apple) %>% forecast(,500) %>% plot()
auto.arima(roll_apple) %>% forecast(500) %>% plot()
auto.arima(roll_apple) %>% forecast(50) %>% plot()
auto.arima(roll_apple) %>% forecast(50) %>% plot(col = "red")
auto.arima(roll_apple) %>% forecast(50) %>% plot(col = "green")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% plot(col = "green")
auto.arima(roll_apple) %>% forecast(50) %>% plot(col = "green")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% plot(col = "red")
auto.arima(roll_apple) %>% forecast(50) %>% plot(col = "green")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% lines(col = "red")
auto.arima(roll_apple) %>% forecast(50) %>% plot(col = "green")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% lines(col = "red")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% lines()
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% lines(col = "red")
auto.arima(AAPL$AAPL.Adjusted) %>% forecast(50) %>% plot(col = "red")
#q1
c = c(-1,4)
A = matrix(c(-10,5,1,0,20,10,0,1),4,2)
A
b = c(22,49,5,5)
dir = rep("<=",4)
sol = lp("max",c,A,dir,b, all.int = T)
sol$solution
library(lpSolve)
A = matrix(c(-10,5,1,0,20,10,0,1),4,2)
A
b = c(22,49,5,5)
dir = rep("<=",4)
sol = lp("max",c,A,dir,b, all.int = T)
sol$solution
#left branch
b1 = c(22,49,3,5)
sol = lp("max",c,A,dir,b1)
sol$solution
b3 = c(22,49,3,2)
sol = lp("max",c,A,dir,b3)
sol$solution
b7 = c(22,49,1,2)
sol = lp("max",c,A,dir,b7)
sol$solution
b8 = c(22,49,2,2)
sol = lp("max",c,A,c("<=","<=","=","<="),b8)
sol$solution
b5 = c(22,49,3,3)
sol = lp("max",c,A,c("<=","<=","<=",">="),b5)
sol$solution
#right branch
b2 = c(22,49,4,5)
sol = lp("max",c,A,c("<=","<=",">=","<="),b2)
sol$solution
b4 = c(22,49,4,2)
sol = lp("max",c,A,dir,b4)
sol$solution
b9 = c(22,49,1,2)
sol = lp("max",c,A,dir,b9)
sol$solution
b10 = c(22,49,2,2)
sol = lp("max",c,A,c("<=","<=","=","<="),b10)
sol$solution
b6 = c(22,49,4,3)
sol = lp("max",c,A,c("<=","<=","<=",">="),b6)
sol$solution
#q2
c2 = c(9,5,6,4)
bq2 = c(11,1,1)
A = matrix(0,3,4)
A[1,] = c(6,3,5,2)
A[2,] = c(1,1,0,0)
A[3,] = c(0,0,1,1)
A
dir = c("<=",">=","<=")
solution = lp("max",c,A,dir,bq2, all.bin = T)
solution$solution
#q3
Amat = matrix(0,12,12)
Amat
Amat
Amat = diag(12)
Amat
Amat[1,3] = 1
Amat[1,5] = 1
Amat[1,7] = 1
Amat
Amat[1,8] = 1
Amat[1,9] = 1
Amat
Amat[2,8:9] = c(1,1)
Amat
Amat[3,7:9] = c(1,1,1)
Amat
Amat[4,10] = 1
Amat
Amat[5,7] =1
Amat[6,10:11] = rep(1,2)
Amat
Amat[8,9] =1
Amat[10,11:12] = rep(1,2)
Amat[11,12] =1
Amat
c = rep(1,12)
obj = rep(1,12)
dir = rep("<=",12)
sol = lp("min",c,Amat,dir,c,all,bin =T)
sol = lp("min",c,Amat,dir,rep(1,12),all,bin =T)
sol = lp("min",c,Amat,dir,rep(1,12),all.bin =T)
sol$solution
sol = lp("max",c,Amat,dir,rep(1,12),all.bin =T)
sol$solution
Amat[3,1] = 1
Amat[3,3] =1
Amat[5,1] = 1
Amat[7,1] =1
Amat[7,3] = 1
Amat[7,5] =1
Amat[8,1:3] = rep(1,3)
Amat[9,1:3] = rep(1,3)
Amat[9,8] = 1
Amat[10,4] =1
Amat[10,6] =1
Amat[11,6] =1
Amat[11,10] =1
Amat[12,10:11] =1
Amat
c = rep(1,12)
obj = rep(1,12)
dir = rep("<=",12)
sol = lp("max",c,Amat,dir,rep(1,12),all.bin =T)
sol$solution
dir = rep("=",12)
sol = lp("max",c,Amat,dir,rep(1,12),all.bin =T)
sol$solution
#q4
25*233+37*148+54*106
17025/120
142*3
mat = matrix(0,4,426)
mat
head(mat)
#q4
mat = c(25,37,54)
c = c(25,37,54)
sol = lp("max",c,mat,"<=",rep(1,3),all.int = T)
sol$solution
#q4
mat = c(25,37,54)
c = c(25,37,54)
sol = lp("max",c,mat,"<=",rep(1,3),all.int = T)
sol$solution
sol = lp("max",c,mat,"<=",120,all.int = T)
sol$solution
sol$solution
b = c(120)
sol = lp("max",c,mat,"<=",b,all.int = T)
sol$solution
mat = c(25,37,54)
c = c(25,37,54)
b = c(120)
sol = lp("max",c,mat,"<=",b,all.int = T)
sol$solution
mat
c = c(-25,-37,-54)
b = c(120)
sol = lp("max",c,mat,"<=",b,all.int = T)
sol$solution
sol = lp("min",c,mat,"<=",b,all.int = T)
sol$solution
sol$objval
c = c(25,37,54)
sol = lp("min",c,mat,"<=",b,all.int = T)
sol$solution
sol$objval
sol = lp("max",c,mat,"<=",b,all.int = T)
sol$solution
sol$objval
A = matrix(0,4,500)
A
A[1,] =
25*233+37*148+54*106
A[1,] =
25*233+37*148+54*106
25*233+37*148+54*106
17025/120
A = matrix(0,4,142)
A
142/3
142*3
A = matrix(0,4,426)
A[1,] = rep(c(25,37,54),142)
A
A[2,] = rep(c(1,0,0),142)
A[3,] = rep(c(0,1,0),142)
A[4,] = rep(c(0,0,1),142)
A
A[,1]
120*142
b = c(17040,233,148,106)
dir = c("<=","=","=","=")
obj = rep(1,426)
sol = lp("max",obj,A,dir,b, all.int = T)
sol$solution
library(lpsolve)
library(lpSolve)
pmi <- read.csv("ISM-MAN_PMI_cl.csv")
setwd("C:/Users/arunk/Downloads")
pmi <- read.csv("ISM-MAN_PMI_cl.csv")
library(quantmod)
pmi <- as.xts(pmi[,2:ncol(pmi)], pmi$Date)
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = pmi$Date)
pmi <- read.csv("ISM-MAN_PMI_cl.csv")
library(quantmod)
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = pmi$Date)
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date))
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date), format = "%m/%d/%Y")
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date), format = "%m/%d/%Y")
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%Y")
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%Y"))
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%Y"))
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%Y"))
View(pmi)
pmi <- pmi[1:241,]
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%Y"))
head(pmi)
pmi[,3:ncol(pmi)] <- NULL
pmi[,3:ncol(pmi)] <- rep(NULL)
pmi$X <- NULL
pmi$X.1 <- NULL
pmi$X.2 <-NULL
pmi$X.3 <- NULL
pmi$X.4 <- NULL
pmi$X.5 <- NULL
t <- seq(start(pmi), end(pmi), by = 1)
t_ts <- as.xts(rep(NA,length(t)), t)
View(t_ts)
View(pmi)
pmi <- read.csv("ISM-MAN_PMI_cl.csv")
library(quantmod)
pmi <- pmi[1:241,]
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%y"))
pmi$X <- NULL
pmi$X.1 <- NULL
pmi$X.2 <-NULL
pmi$X.3 <- NULL
pmi$X.4 <- NULL
pmi$X.5 <- NULL
t <- seq(start(pmi), end(pmi), by = 1)
t <- seq(start(pmi), end(pmi), by = 1)
View(pmi)
pmi <- read.csv("ISM-MAN_PMI_cl.csv")
pmi <- pmi[1:241,]
pmi <- as.xts(pmi[,2:ncol(pmi)], order.by = as.Date(pmi$Date, format = "%m/%d/%y"))
pmi$X <- NULL
pmi$X.1 <- NULL
pmi$X.2 <-NULL
pmi$X.3 <- NULL
pmi$X.4 <- NULL
pmi$X.5 <- NULL
t <- seq(start(pmi), end(pmi), by = 1)
t_ts <- as.xts(rep(NA,length(t)), t)
t_pmi <- merge.xts(t_ts, pmi)
View(t_pmi)
t_pmi$t_ts <- NULL
t_pmi <- na.locf(t_pmi)
t_pmi <- na.locf0(t_pmi, fromLast = T)
write.zoo(t_pmi, file = "filled_pmi.csv", sep = ",")
knitr::opts_chunk$set(echo  =  TRUE)
ggplot(msleep)
library(msleep)
ggplot(msleep)
library(ggplot2)
library(ggplot2)
ggplot(msleep)
ggplot(msleep)
library(ggplot2)
ggplot(msleep)
ggplot(msleep, aes(x = size)) + geom_bar()
msleep <- msleep
RColorBrewer::display.brewer.all()
msleep1<-msleep[!is.na(msleep$brainwt),]
ggplot(msleep1, aes(sleep_total,sleep_rem))+
geom_point(aes(color=log10(brainwt)), size=3)
ggplot(msleep1, aes(sleep_total,sleep_rem))+
geom_point(aes(color=log10(brainwt)), size=3)+
scale_color_gradient(low="yellow", high="red")
msleep1<-msleep[!is.na(msleep$brainwt),]
ggplot(msleep1, aes(sleep_total,sleep_rem))+
geom_point(aes(color=log10(brainwt)), size=3)
ggplot(msleep1, aes(sleep_total,sleep_rem))+
geom_point(aes(color=log10(brainwt)), size=3)+
scale_color_gradient(low="yellow", high="red")
ggplot(msleep1, aes(sleep_total, sleep_rem))+geom_density2d()
data  <-  data.frame(roll = 1:10,  prob = 1/10)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks = 1:10)
data <- data.frame(roll = 1:100,  prob = 1/100)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks=1:100,minor_breaks = NULL)
data <- data.frame(roll = 1:500,  prob = 1/1000)
ggplot(data,  aes(roll, prob))  +  geom_bar(stat = "identity") +
scale_x_continuous(breaks=1:1000, minor_breaks = NULL, labels=NULL)
data  <-  data.frame(roll = 1:10,  prob = 1/10)
data
sample((1:6),5)
plot(sample((1:6),5))
ggplot(sample((1:6),5)) + geom_point()
ggplot(as.dataframe(sample((1:6),5))) + geom_point()
ggplot(as.data.frame(sample((1:6),5))) + geom_point()
sample(1:6,4, replace = T)
sample(1:6,400, replace = T)
ggplot()+geom_bar(rolls, aes(x=rolls))
sample(1:6,400, replace = T)
sample(1:6,400, replace = T)
ggplot()+geom_bar(rolls, aes(x=rolls))
rolls <- sample(1:6,400, replace = T)
ggplot()+geom_bar(rolls, aes(x=rolls))
ggplot( aes(x=rolls))+geom_bar(rolls)
data  <-  data.frame(roll = 1:10,  prob = 1/10)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks = 1:10)
data <- data.frame(roll = 1:100,  prob = 1/100)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks=1:100,minor_breaks = NULL)
data <- data.frame(roll = 1:100,  prob = 1/100)
data <- data.frame(roll = 1:100,  prob = 1/100)
data  <-  data.frame(roll = 1:10,  prob = 1/10)
data  <-  data.frame(roll = 1:10,  prob = 1/10)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks = 1:10)
data <- data.frame(roll = 1:100,  prob = 1/100)
ggplot(data,  aes(roll, prob)) + geom_bar(stat = "identity") +
scale_x_continuous(breaks=1:100,minor_breaks = NULL)
setwd("~/GitHub/arun-krishnaraj.github.io/Rmd-Repo")
setwd("~/GitHub/arun-krishnaraj.github.io/Rmd-Repo")
lynxhare = read.table("lynxhare.tsv",
sep="\t", row.names=NULL, header=TRUE)
lynxhare = read.table("lynxhare.tsv",
sep="\t", row.names=NULL, header=TRUE)
