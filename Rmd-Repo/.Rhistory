dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
setwd("~/Documents/GitHub/arun-krishnaraj.github.io/Rmd-Repo")
results(dds)
lgnorm = log2(counts(dds, normalized = TRUE)+1)
pca = prcomp(t(lgnorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
library(ggplot2); library(tidyverse)
pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) + geom_point() + scale_color_manual(values=groupColors)
geneset <- read.table("gene_sets.tsv",
sep = "\t", header = TRUE, row.names = 1, quote = "")
geneset <- read.table("gene_sets.tsv.gz",
sep = "\t", header = TRUE, row.names = 1, quote = "")
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=1, header=TRUE, quote="")
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="")
geneset
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="", comment.char = "")
geneset
geneset[geneset$gene_ontology_primary_id == "GO:0006865"]
geneset[geneset$gene_ontology_primary_id == "GO:0006865",]
geneNamesAndDescriptions
geneset[geneset$gene_ontology_primary_id == "GO:0006865",]
geneset[geneset$gene_ontology_primary_id == "GO:0006865", gene] -> gene_vec
geneset[geneset$gene_ontology_primary_id == "GO:0006865",]$gene -> gene_vec
gene_vec
geneNamesAndDescriptions$gene == gene_vec
gene_vec
geneNamesAndDescriptions$gene %in% gene_vec
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,]
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3]
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame %>% rownames() <- NULL
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame %>% rownames <- NULL
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame() %>% rownames() <- NULL
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame()
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame() -> gene_df
rownames(gene_df) <- NULL
gene_df
install.packages("R.utils")
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,2:3] %>% data.frame() -> gene_df
gene_df
geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec,1:3] %>% data.frame() -> gene_df
rownames(gene_df) <- NULL
write.table(gene_df, "gene-info.tsv",
sep = "\t", row.names = FALSE, quote = FALSE)
lgnorm
rownames(lgnorm)
rownames(lgnorm) %in% gene_vec
lgnorm[rownames(lgnorm) %in% gene_vec,]
lgnorm[rownames(lgnorm) %in% gene_vec,] -> lgGo
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) + geom_point() + scale_color_manual(values=groupColors)
knitr::opts_chunk$set(echo = TRUE)
class_diag <- function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
f1=2*(sens*ppv)/(sens+ppv)
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,f1,auc)
}
head(evals) %>% knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
class_diag <- function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
f1=2*(sens*ppv)/(sens+ppv)
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,f1,auc)
}
library(tidyverse)
library(rstatix)
summary.aov(man1)[1]
knitr::opts_chunk$set(echo = TRUE)
class_diag <- function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
f1=2*(sens*ppv)/(sens+ppv)
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,f1,auc)
}
library(tidyverse)
library(rstatix)
evals <- read.csv("evals.csv")
colnames(evals) <- c("Evaluation.Score", "Rank", "Ethnicity", "Gender", "Language.Of.Education", "Age",
"Pct.Eval.Completion", "Number.Eval.Completion", "Class.Size", "Class.Level",
"Num.Profs.Teaching", "Class.Credits", "Lower.Female1.Rating", "Upper.Female1.Rating",
"Upper.Female2.Rating", "Lower.Male1.Rating", "Upper.Male1.Rating", "Upper.Male2.Rating",
"Avg.Rating", "Picture.Formality", "Picture.Color")
head(evals) %>% t %>% knitr::kable()
group <- evals$Rank
DVs <- evals %>% select(Evaluation.Score, Age, Lower.Female1.Rating, Upper.Female1.Rating, Upper.Female2.Rating, Lower.Male1.Rating, Upper.Male1.Rating, Upper.Male2.Rating)
#Test multivariate normality for each group (null: assumption met)
sapply(split(DVs,group), mshapiro_test)
man1 <- manova(cbind(Evaluation.Score, Age, Lower.Female1.Rating, Upper.Female1.Rating, Upper.Female2.Rating, Lower.Male1.Rating, Upper.Male1.Rating, Upper.Male2.Rating) ~ Rank, data = evals)
summary(man1)
summary.aov(man1)[1]
summary.aov(man1)[c(2,4,5,6,7,8)]
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[1]
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[2]
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[4]
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[3]
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[3] %>% coef()
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[3] %>% coef()
pairwise.t.test(evals$Age,
evals$Rank, p.adj = "none")[3]
pnorm(-abs(-5))
pnorm(-5) + pnorm(5, lower.tail = F)
pnorm(-abs(-5))
pnorm(-abs(-5))*2
pnorm(-5) + pnorm(5, lower.tail = F)
pnorm(-abs(5))*2
pnorm(-5) + pnorm(5, lower.tail = F)
pnorm(-abs(5))*2
pnorm(-5) + pnorm(5, lower.tail = F)
pnorm(5) + pnorm(5, lower.tail = F)
pnorm(5) + pnorm(-5, lower.tail = F)
marriage.z
knitr::opts_chunk$set(
collapse = TRUE,
fig.align="center",
fig.pos="t",
strip.white = TRUE
)
null.mean = 286; samp.size = 100; pop.sd = 155
norm.sd = pop.sd/(samp.size^.5)
x <- seq(null.mean-4*norm.sd, null.mean+4*norm.sd, length = 1000)
z.star <- qnorm(0.05)
hx <- dnorm(x, mean = null.mean, sd = norm.sd)
left.alt.cut = null.mean + z.star*norm.sd
dmerge <- data.frame(x,hx)
library(ggplot2)
ggplot(data = dmerge, aes(x = x, y = hx)) + geom_line() + theme_minimal() +
xlab("Sample Mean Sugar-Calories Consumed") + ylab("Density") +
ggtitle("Distribution of Sample Mean under Null") +
geom_vline(xintercept = null.mean, col = "goldenrod2") +
geom_vline(xintercept = left.alt.cut, col = "dodgerblue") +
geom_ribbon(data = dmerge[dmerge$x < left.alt.cut,] ,
aes(ymin = 0, ymax = hx), fill = "dodgerblue", alpha = 0.5)
test_pow <- function(alternative){
pnorm(left.alt.cut, mean = alternative, sd = norm.sd)
}
hx.pow <- test_pow(x)
dmerge.pow <- data.frame(x,hx.pow)
ggplot(data = dmerge.pow, aes(x=x,y=hx.pow)) + geom_line() + theme_minimal() +
xlab("Alternative Population Mean Sugar Consumption") +
ylab("Test Power (Left-Sided Rejection)") +
ggtitle("Left-Sided Test Power vs Alternative Mean")
library(tidyverse)
marriage <- read.csv("logic.csv", stringsAsFactors = F)
marriage <- marriage[,2:3]
colnames(marriage) <- c("Answer", "Section")
marriage %>% group_by(Section, Answer) %>% summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>% ggplot(aes(x = Answer, y = freq)) +
geom_bar(aes(fill = Answer), alpha = 0.95, stat = "identity") +
facet_wrap(~Section) + scale_fill_manual(values =
c("dodgerblue", "deeppink2", "goldenrod2")) +
theme(axis.text.x = element_text(angle = 50, hjust = 1)) + ylab("Frequency")
marriage$Answer <-ifelse(marriage$Answer=="Yes", TRUE, FALSE)
prop.11 <-mean(marriage[marriage$Section=="11am",]$Answer)
prop.12 <-mean(marriage[marriage$Section=="12noon",]$Answer)
num.11 <-nrow(marriage[marriage$Section=="11am",])
num.12 <-nrow(marriage[marriage$Section=="12noon",])
prop.overall <- mean(marriage$Answer)
(prop.12-prop.11)/(sqrt(prop.overall*(1-prop.overall)*((1/num.12)+(1/num.11)))) -> marriage.z
marriage.z
marriage.z
pnorm(marriage.z)
marriage.z
pnorm(marriage.z, lower.tail = FALSE) + pnorm(-marriage.z, lower.tail = TRUE)
source("bio321g_rnaseq_utils.R")
library(DESeq2)
## DESeq object creation and testing
dds = DESeqDataSetFromMatrix(countData = rnaCounts, colData = sampleAnnotation,
design = ~ time + genotype + time:genotype)
dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
ddsresults <- results(dds, alpha = 0.1)
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
## Count normalization and transformation
lgNorm = log2(counts(dds, normalized = TRUE)+1)
## PCA on log normalized counts, all genes
pca = prcomp(t(lgNorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
library(ggplot2); library(tidyverse)
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() +
ggtitle("PCA Plot for all Genes") + labs(color = "Group")
pca1
## Subset to include assigned genes
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="", comment.char = "")
gene_vec <- geneset[geneset$gene_ontology_primary_id == "GO:0006865",]$gene
## Assigned geneset information, tsv creation
gene_df <- geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec, 1:3] %>% data.frame()
rownames(gene_df) <- NULL
write.table(gene_df, "Final-Project-Gene-desc.tsv",
sep = "\t", row.names = FALSE, quote = FALSE)
## Filtering counts for assigned geneset
lgGo <- lgNorm[rownames(lgNorm) %in% gene_vec,] %>% data.frame(check.names = FALSE)
## PCA on log normalized counts, assigned genes
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca2 <- pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + ggtitle("PCA Plot for Gene Set (GO:0006865)") +
labs(color = "Group") + theme_minimal()
pca2
## Clustered heatmap, assigned genes
library(pheatmap)
heatData <- lgGo -rowMeans(lgGo)
heatData[heatData > 2] = 2
heatData[heatData < -2] = -2
pheat1 <- pheatmap(heatData, color = heatPalette, clustering_method = "average",
labels_row = geneNamesAndDescriptions[rownames(heatData), "symbol"],
cutree_cols = 2, fontsize_row = 8, main = "Clustered Heatmap")
pheat1
## Expression stripchart, assigned genes
data.frame(results(dds)[5]) -> pmat
top_9_exp <- subset(pmat, rownames(pmat) %in% gene_vec) %>% arrange(pvalue) %>% head(9) %>% rownames
GoExp <- lgGo[rownames(lgGo) %in% top_9_exp,]
stripgg <- stripchart321g(data = GoExp, sampleAnnotation = sampleAnnotation)
stripgg <- stripgg + ggtitle("Gene Expression by Genotype and Time") + xlab("Genotype") + ylab("Expression") + labs(color = "Group", shape = "Time")
setwd("~/Documents/GitHub/arun-krishnaraj.github.io/Rmd-Repo")
source("bio321g_rnaseq_utils.R")
library(DESeq2)
## DESeq object creation and testing
dds = DESeqDataSetFromMatrix(countData = rnaCounts, colData = sampleAnnotation,
design = ~ time + genotype + time:genotype)
dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
ddsresults <- results(dds, alpha = 0.1)
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
## Count normalization and transformation
lgNorm = log2(counts(dds, normalized = TRUE)+1)
## PCA on log normalized counts, all genes
pca = prcomp(t(lgNorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
library(ggplot2); library(tidyverse)
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() +
ggtitle("PCA Plot for all Genes") + labs(color = "Group")
pca1
## Subset to include assigned genes
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="", comment.char = "")
gene_vec <- geneset[geneset$gene_ontology_primary_id == "GO:0006865",]$gene
## Assigned geneset information, tsv creation
gene_df <- geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec, 1:3] %>% data.frame()
rownames(gene_df) <- NULL
write.table(gene_df, "Final-Project-Gene-desc.tsv",
sep = "\t", row.names = FALSE, quote = FALSE)
## Filtering counts for assigned geneset
lgGo <- lgNorm[rownames(lgNorm) %in% gene_vec,] %>% data.frame(check.names = FALSE)
## PCA on log normalized counts, assigned genes
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca2 <- pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + ggtitle("PCA Plot for Gene Set (GO:0006865)") +
labs(color = "Group") + theme_minimal()
pca2
## Clustered heatmap, assigned genes
library(pheatmap)
heatData <- lgGo -rowMeans(lgGo)
heatData[heatData > 2] = 2
heatData[heatData < -2] = -2
pheat1 <- pheatmap(heatData, color = heatPalette, clustering_method = "average",
labels_row = geneNamesAndDescriptions[rownames(heatData), "symbol"],
cutree_cols = 2, fontsize_row = 8, main = "Clustered Heatmap")
pheat1
## Expression stripchart, assigned genes
data.frame(results(dds)[5]) -> pmat
top_9_exp <- subset(pmat, rownames(pmat) %in% gene_vec) %>% arrange(pvalue) %>% head(9) %>% rownames
GoExp <- lgGo[rownames(lgGo) %in% top_9_exp,]
stripgg <- stripchart321g(data = GoExp, sampleAnnotation = sampleAnnotation)
stripgg <- stripgg + ggtitle("Gene Expression by Genotype and Time") + xlab("Genotype") + ylab("Expression") + labs(color = "Group", shape = "Time")
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
testedGenes
normed = read.table("neves_deseq_normalized.tsv.gz",
sep="\t", header=TRUE, row.names=1, quote="")
source("bio321g_rnaseq_utils.R")
library(DESeq2)
## DESeq object creation and testing
dds = DESeqDataSetFromMatrix(countData = rnaCounts, colData = sampleAnnotation,
design = ~ time + genotype + time:genotype)
dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
ddsresults <- results(dds, alpha = 0.1)
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
## Count normalization and transformation
lgNorm = log2(counts(dds, normalized = TRUE)+1)
## PCA on log normalized counts, all genes
pca = prcomp(t(lgNorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
pca$sdev
pca$sdev[[1]]
pca$sdev[[2]]
pca$sdev[[1]]^2/sum(pca$sdev^2)
pca$sdev[[2]]^2/sum(pca$sdev^2)
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() +
ggtitle("PCA Plot for all Genes") + labs(color = "Group") + xlab("PC1 (55.9% explained var.)") + ylab("PC2 (15.5% explained var.)")
pca1
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) +
ggtitle("PCA Plot for all Genes") + labs(color = "Group") + xlab("PC1 (55.9% explained var.)") + ylab("PC2 (15.5% explained var.)")
pca1
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black"))
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black"))
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black")) +
ggtitle("PCA Plot for all Genes") + labs(color = "Group") + xlab("PC1 (55.9% explained var.)") + ylab("PC2 (15.5% explained var.)")
pca1
pca_lggo$sdev
pca_lggo$sdev[[1]]
pca_lggo$sdev[[1]]^2
pca_lggo$sdev[[1]]^2 / sum(pca_lggo$sdev^2)
pca_lggo$sdev[[2]]^2 / sum(pca_lggo$sdev^2)
source("bio321g_rnaseq_utils.R")
library(DESeq2)
## DESeq object creation and testing
dds = DESeqDataSetFromMatrix(countData = rnaCounts, colData = sampleAnnotation,
design = ~ time + genotype + time:genotype)
dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
ddsresults <- results(dds, alpha = 0.1)
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
## Count normalization and transformation
lgNorm = log2(counts(dds, normalized = TRUE)+1)
## PCA on log normalized counts, all genes
pca = prcomp(t(lgNorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
pca$sdev[[1]]^2/sum(pca$sdev^2) # Fraction of variance calculations
pca$sdev[[2]]^2/sum(pca$sdev^2)
library(ggplot2); library(tidyverse)
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black")) +
ggtitle("PCA Plot for all Genes") + labs(color = "Group") + xlab("PC1 (55.9% explained var.)") + ylab("PC2 (15.5% explained var.)")
pca1
## Subset to include assigned genes
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="", comment.char = "")
gene_vec <- geneset[geneset$gene_ontology_primary_id == "GO:0006865",]$gene
## Assigned geneset information, tsv creation
gene_df <- geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec, 1:3] %>% data.frame()
rownames(gene_df) <- NULL
write.table(gene_df, "Final-Project-Gene-desc.tsv",
sep = "\t", row.names = FALSE, quote = FALSE)
## Filtering counts for assigned geneset
lgGo <- lgNorm[rownames(lgNorm) %in% gene_vec,] %>% data.frame(check.names = FALSE)
## PCA on log normalized counts, assigned genes
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca_lggo$sdev[[1]]^2 / sum(pca_lggo$sdev^2) # Fraction of variance calculations
pca_lggo$sdev[[2]]^2 / sum(pca_lggo$sdev^2)
pca2 <- pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + ggtitle("PCA Plot for Gene Set (GO:0006865)") +
labs(color = "Group") + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black")) +
xlab("PC1 (54.9% explained var.)") + ylab("PC2 (22.1% explained var)")
pca2
## Clustered heatmap, assigned genes
library(pheatmap)
heatData <- lgGo -rowMeans(lgGo)
heatData[heatData > 2] = 2
heatData[heatData < -2] = -2
pheat1 <- pheatmap(heatData, color = heatPalette, clustering_method = "average",
labels_row = geneNamesAndDescriptions[rownames(heatData), "symbol"],
cutree_cols = 2, fontsize_row = 8, main = "Clustered Heatmap")
pheat1
## Expression stripchart, assigned genes
data.frame(results(dds)[5]) -> pmat
top_9_exp <- subset(pmat, rownames(pmat) %in% gene_vec) %>% arrange(pvalue) %>% head(9) %>% rownames
GoExp <- lgGo[rownames(lgGo) %in% top_9_exp,]
stripgg <- stripchart321g(data = GoExp, sampleAnnotation = sampleAnnotation)
stripgg <- stripgg + ggtitle("Gene Expression by Genotype and Time") + xlab("Genotype") + ylab("Expression") + labs(color = "Group", shape = "Time")
pca2 <- pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + ggtitle("PCA Plot for Gene Set (GO:0006865)") +
labs(color = "Group") + theme_minimal() + theme(panel.background = element_rect(fill = "white", color = "black")) +
xlab("PC1 (54.9% explained var.)") + ylab("PC2 (22.1% explained var)")
pca2
PC1 highly separates samples by light treatment group across all 3 Arabidopsis genotypes: light treatment groups tend to score low on PC1, while dark treatment groups score highly for PC1. PC2 highly separates 14B mutant from both 4G mutant and Wild-type samples across light treatment groups. 14B mutants score highly on PC2, while 4G and Wild samples score low. The first and second PCs in this model explain 55.9% and 15.5% of overall gene expression variance respectively. Overall, the PCA plot indicates that differential expression may occur as a result of genotype-light interactions.
source("bio321g_rnaseq_utils.R")
library(DESeq2)
## DESeq object creation and testing
dds = DESeqDataSetFromMatrix(countData = rnaCounts, colData = sampleAnnotation,
design = ~ time + genotype + time:genotype)
dds = DESeq(dds, parallel = FALSE, test = "LRT", reduced = ~ time + genotype)
ddsresults <- results(dds, alpha = 0.1)
## FDR calculation
which(!is.na(ddsresults$padj)) -> testedGenes
sum(ddsresults[testedGenes, "padj"] <= .1)
## Count normalization and transformation
lgNorm = log2(counts(dds, normalized = TRUE)+1)
## PCA on log normalized counts, all genes
pca = prcomp(t(lgNorm))
pca.data <- data.frame(pca$x[,1:2])
pca.data$group  = sampleAnnotation[rownames(pca.data), "group"]
pca.data$sample = rownames(pca.data)
pca$sdev[[1]]^2/sum(pca$sdev^2) # Fraction of variance calculations
pca$sdev[[2]]^2/sum(pca$sdev^2)
library(ggplot2); library(tidyverse)
pca1 <- pca.data %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + theme_minimal() + theme(panel.background = element_rect(fill = NULL, color = "black")) +
ggtitle("PCA Plot for all Genes") + labs(color = "Group") + xlab("PC1 (55.9% explained var.)") + ylab("PC2 (15.5% explained var.)")
pca1
## Subset to include assigned genes
geneset <- read.table("gene_sets.tsv.gz",
sep="\t", row.names=NULL, header=TRUE, quote="", comment.char = "")
gene_vec <- geneset[geneset$gene_ontology_primary_id == "GO:0006865",]$gene
## Assigned geneset information, tsv creation
gene_df <- geneNamesAndDescriptions[geneNamesAndDescriptions$gene %in% gene_vec, 1:3] %>% data.frame()
rownames(gene_df) <- NULL
write.table(gene_df, "Final-Project-Gene-desc.tsv",
sep = "\t", row.names = FALSE, quote = FALSE)
## Filtering counts for assigned geneset
lgGo <- lgNorm[rownames(lgNorm) %in% gene_vec,] %>% data.frame(check.names = FALSE)
## PCA on log normalized counts, assigned genes
pca_lggo <- prcomp(t(lgGo))
pca_lggo_dat  <- data.frame(pca_lggo$x[,1:2])
pca_lggo_dat$group <- sampleAnnotation[rownames(pca_lggo_dat), "group"]
pca_lggo_dat$sample <- rownames(pca_lggo_dat)
pca_lggo$sdev[[1]]^2 / sum(pca_lggo$sdev^2) # Fraction of variance calculations
pca_lggo$sdev[[2]]^2 / sum(pca_lggo$sdev^2)
pca2 <- pca_lggo_dat %>% ggplot(aes(x = PC1, y = PC2, color = group, label = sample)) +
geom_point() + scale_color_manual(values=groupColors) + ggtitle("PCA Plot for Gene Set (GO:0006865)") +
labs(color = "Group") + theme_minimal() + theme(panel.background = element_rect(fill = "white", color = "black")) +
xlab("PC1 (54.9% explained var.)") + ylab("PC2 (22.1% explained var)")
pca2
## Clustered heatmap, assigned genes
library(pheatmap)
heatData <- lgGo -rowMeans(lgGo)
heatData[heatData > 2] = 2
heatData[heatData < -2] = -2
pheat1 <- pheatmap(heatData, color = heatPalette, clustering_method = "average",
labels_row = geneNamesAndDescriptions[rownames(heatData), "symbol"],
cutree_cols = 2, fontsize_row = 8, main = "Clustered Heatmap")
pheat1
## Expression stripchart, assigned genes
data.frame(results(dds)[5]) -> pmat
top_9_exp <- subset(pmat, rownames(pmat) %in% gene_vec) %>% arrange(pvalue) %>% head(9) %>% rownames
GoExp <- lgGo[rownames(lgGo) %in% top_9_exp,]
stripgg <- stripchart321g(data = GoExp, sampleAnnotation = sampleAnnotation)
stripgg <- stripgg + ggtitle("Gene Expression by Genotype and Time") + xlab("Genotype") + ylab("Expression") + labs(color = "Group", shape = "Time")
